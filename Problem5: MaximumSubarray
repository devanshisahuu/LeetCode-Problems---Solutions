DSA: Array:
Question: Given an integer array nums, find the subarray with the largest sum, and return its sum.

Solution:
Method 1: Extend the current subarray:
```
class Solution {
    public:
        int maxSubArray(vector<int>& nums) {
        int n = nums.size();
        int max_sum = nums[0];
        int current_sum = nums[0];
            for (int i = 1; i < n; i++) {
            current_sum = max(nums[i], current_sum + nums[i]);
            max_sum = max(max_sum, current_sum);
            }
        return max_sum;
    }
};
```

Method 2: Create a new subarray:
```
#include <iostream>
#include <vector>
using namespace std;
pair<int, pair<int, int>> maxSubarraySum(vector<int>& nums) {
    int n = nums.size();
    int max_sum = nums[0];
    int current_sum = nums[0];
    int start_index = 0;
    int end_index = 0;
    int temp_start = 0;
    for (int i = 1; i < n; i++) {
        if (nums[i] > current_sum + nums[i]) {
            current_sum = nums[i];
            temp_start = i;
        } else {
            current_sum = current_sum + nums[i];
        }
        if (current_sum > max_sum) {
            max_sum = current_sum;
            start_index = temp_start;
            end_index = i;
        }
    }
    return {max_sum, {start_index, end_index}};
}
int main() {
    vector<int> nums = {-2, 1, -3, 4, -1, 2, 1, -5, 4};
    pair<int, pair<int, int>> result = maxSubarraySum(nums);
    int max_sum = result.first;
    int start_index = result.second.first;
    int end_index = result.second.second;
    cout << "The maximum sum of the subarray is: " << max_sum << endl;
    cout << "The subarray with the largest sum is: ";
    for (int i = start_index; i <= end_index; i++) {
        cout << nums[i] << " ";
    }
    cout << endl;
    return 0;
}
```

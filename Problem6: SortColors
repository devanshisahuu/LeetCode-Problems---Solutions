DSA: Arrays:
Question: Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.
          We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.
          You must solve this problem without using the library's sort function.

Solution:

```
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int low = 0;         // Pointer for 0s
        int high = nums.size() - 1;  // Pointer for 2s
        int i = 0;
        while (i <= high) {
            if (nums[i] == 0) {
                swap(nums[i], nums[low]);
                low++;
                i++;
            } else if (nums[i] == 2) {
                swap(nums[i], nums[high]);
                high--;
            } else {
                i++;
        }
    }
}
int main() {
    vector<int> nums = {2, 0, 2, 1, 1, 0};
    sortColors(nums);
    cout << "Sorted colors: ";
    for (int color : nums) {
        cout << color << " ";
    }
    cout << endl;
    return 0;
}
};
```
